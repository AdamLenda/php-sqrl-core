{"version":3,"sources":["page-sync.js"],"names":["newSync","lastSync","encodedSqrlUrl","syncQuery","window","XMLHttpRequest","ActiveXObject","gifProbe","Image","localhostRoot","sqrlLinkClick","e","getAttribute","onerror","Date","now","onload","navigator","userAgent","match","document","getElementById","onclick","this","location","href","setTimeout","src"],"mappings":"AAAA,aAoCA,IAAIA,SAAU,EACVC,UAAW,EACXC,gBAAiB,EACjBC,UAAYC,OAAOC,eAAiB,IAAID,OAAOC,eAAmB,IAAIC,cAAc,sBACpFC,SAAW,IAAIC,MACfC,cAAgB,0BAoDpB,SAASC,cAAcC,IACnBT,eAAiBS,EAAEC,aAAa,sBAG5BL,SAASM,UAvDjBC,KAAKC,IAAMD,KAAKC,KAAO,WACnB,OAAS,IAAID,MAOjBV,OAAOY,OAAS,YACPC,UAAUC,UAAUC,MAAM,WAAgBF,UAAUC,UAAUC,MAAM,UAAeF,UAAUC,UAAUC,MAAM,cAC9GC,SAASC,eAAe,QAAQC,QAAU,WAEtC,OADAZ,cAAca,OACP,KASnBhB,SAASS,OAAS,WACdI,SAASI,SAASC,KAAOhB,cAAgBP,gBAO7CK,SAASM,QAAU,WACfa,WAAW,WACPnB,SAASoB,IAAMlB,cAAgBK,KAAKC,MAAQ,QAC7C","file":"page-sync.js","sourcesContent":["'use strict';\n//******************************************************************************\n//           This is reference/sample JavaScript support for SQRL\n//------------------------------------------------------------------------------\n// This script begins running when it is invoked, typically at the top of the\n// page through a script declaration in the page's head. There is no need for,\n// nor benefit in, deliberately placing this at the bottom of the page, though\n// that can be done if it's preferable for any reason.\n//\n// The script defines two SQRL-enhancing functions and onload/onerror handlers\n// for a memory-resident 'probe' GIF image.\n//\n// The first function produces a periodic (every 500ms) host server probe which\n// checks to see whether anything has changed (the user has authenticated) and\n// the page should be refreshed to show the updated status. This queries SQRL's\n// webserver for a 'sync.txt' page. When the returned data differs from the data\n// it first obtained, a refresh/reload of the page is triggered.\n//\n// The second function converts a user click or touch action on the SQRL QR code\n// into two actions: the URL's sqrl:// URL is immediately invoked to launch or\n// awaken the platform's SQRL client. Immediately after that the script begins\n// probing for the presence of SQRL's localhost server listening on port 25519\n// by repeatedly attempting to load a randomly-named GIF image from the server.\n// If the attempt fails for any reason, the script waits 200msec and retries.\n// Once the image is successfully loaded, the localhost server is confirmed to\n// be running and listening, so the script initiates an HREF jump to a page on\n// the localhost:25519 server. The browser then waits to receive a response in\n// the form of an \"HTTP 301 Found\" redirect to the URL provided by the\n// authenticating website... and the user is securely logged on.\n//\n//------------------------------------------------------------------------------\n// LICENSE AND COPYRIGHT:  LIKE ALL OF SQRL, THIS CODE IS HEREBY RELEASED INTO\n// THE PUBLIC DOMAIN. Gibson Research Corporation releases and disclaims ALL\n// RIGHTS AND TITLE IN THIS CODE OR ANY DERIVATIVES. It may be used and/or\n// modified and used by anyone for any purpose.\n//******************************************************************************\nvar newSync = false;\nvar lastSync = false;\nvar encodedSqrlUrl = false;\nvar syncQuery = window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\nvar gifProbe = new Image();                     // create an instance of a memory-based probe image\nvar localhostRoot = \"http://localhost:25519/\";    // the SQRL client listener\nDate.now = Date.now || function () {\n    return (+new Date())\n};    // add old browser Date.now() support\n\n// Linux/WINE desktop environments lack the uniform means for registering scheme handlers.\n// So when we detect that we're running under Linux we disable the invocation of SQRL with\n// the \"sqrl://\" scheme and rely upon upon the localhost server --- UNLESS we detect 'sqrl'\n// present in the user-agent header which gives us permission to invoke with the sqrl:// scheme.\nwindow.onload = function () {\n    if ((navigator.userAgent.match(/linux/i)) && !(navigator.userAgent.match(/sqrl/i)) && !(navigator.userAgent.match(/android/i))) {        // if we're on Linux, suppress the sqrl:// href completely\n        document.getElementById(\"sqrl\").onclick = function () {\n            sqrlLinkClick(this);\n            return false;\n        };\n    }\n};\n\n// =============================================================================\n// this defines the \"onload\" (load success) function for our in-memory test GIF\n// image. IF, and only if, it succeeds, we know the localhost server is up and\n// listening and that it's safe to execute an HREF jump to the localhost for CPS.\ngifProbe.onload = function () {  // define our load-success function\n    document.location.href = localhostRoot + encodedSqrlUrl;\n};\n\n// =============================================================================\n// this defines the \"onerror\" (GIF probe failure) function for our in-memory\n// test GIF. If no SQRL localhost:25519 server replies to and returns a\n// GIF, this function queues a retry of the load after a 200msec delay.\ngifProbe.onerror = function () { // define our load-failure function\n    setTimeout(function () {\n        gifProbe.src = localhostRoot + Date.now() + \".gif\";\n    }, 250);\n};\n\n// =============================================================================\n// sqrlLinkClick is invoked by the SQRL URL's href upon the user's mouse-click\n// or touch. The function verifies that the current page's SQRL HREF link has\n// defined a custom property named \"encoded-sqrl-url\" which is a base64-encoded\n// version of the SQRL URL, provided by the server.  When this function is\n// triggered by the user's SQRL authentication action with the \"encoded-sqrl-url\"\n// link property present, it initiates a one-second delay before initiating a\n// page-change to http://localhost:25519/{encoded-sqrl-url}. When authentication\n// succeeds, the authenticating SQRL client will return an \"HTTP 302 Found\" to\n// redirect the user's browser to a logged-in page.\n//\n// Note that the page could use JavaScript to generate this base64url-encoded\n// URL locally from the link's HREF value. But that would require guaranteed\n// JavaScript execution on the page, which no webserver can force. Therefore,\n// having the webserver explicitly provide the base64url-encoded link allows\n// CPS login to be used successfully without any requirement for JavaScript.\nfunction sqrlLinkClick(e) {\n    encodedSqrlUrl = e.getAttribute(\"encoded-sqrl-url\");\n    // if we have an encoded URL to jump to, initiate our GIF probing before jumping\n    if (encodedSqrlUrl) {\n        gifProbe.onerror();\n    }\n    // trigger the initial image probe query\n}"]}